name: Node Tester

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 0:00 跑
  workflow_dispatch:

jobs:
  test-nodes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests aiohttp

      - name: 创建日志和输出目录
        run: |
          mkdir -p data
          touch data/fetch_nodes.log data/failed_sub_urls.txt data/temp_all_raw_nodes.txt

      - name: 并行拉取节点
        run: |
          # 从本地 backup_sources.list 读取子来源
          cat data/backup_sources.list | grep -v '^#' | grep -v '^$' | xargs -n 1 -P 20 -I {} bash -c '
            echo "拉取 {} ..." >> data/fetch_nodes.log
            nodes=$(curl -s -m 10 "{}" | grep -E "^(hysteria2|vmess|trojan|ss|ssr|vless)://")
            if [ -n "$nodes" ]; then
              echo "$nodes" >> data/temp_all_raw_nodes.txt
              echo "成功从 {} 获取 $(echo "$nodes" | wc -l) 个节点" >> data/fetch_nodes.log
            else
              echo "失败: {} 无节点或无法访问" >> data/fetch_nodes.log
              echo "{}" >> data/failed_sub_urls.txt
            fi
          '
          # 检查是否获取到节点
          if [ -s data/temp_all_raw_nodes.txt ]; then
            echo "成功生成 data/temp_all_raw_nodes.txt，节点数: $(wc -l < data/temp_all_raw_nodes.txt)"
          else
            echo "警告: data/temp_all_raw_nodes.txt 为空，但继续运行" >> data/fetch_nodes.log
          fi

      - name: 运行预过滤脚本
        run: |
          bash prefilter_nodes.sh
          if [ -s data/filtered_nodes.txt ]; then
            echo "预过滤完成，生成 data/filtered_nodes.txt，节点数: $(wc -l < data/filtered_nodes.txt)"
          else
            echo "警告: data/filtered_nodes.txt 为空，继续运行" >> data/fetch_nodes.log
          fi

      - name: 运行节点测试脚本
        run: |
          bash node_tester.sh
          echo "节点测试完成，查看 data/tested_nodes.txt"

      - name: 提交结果
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add data/temp_all_raw_nodes.txt data/filtered_nodes.txt data/tested_nodes.txt data/fetch_nodes.log data/failed_sub_urls.txt
          git commit -m "更新节点数据和日志 $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
